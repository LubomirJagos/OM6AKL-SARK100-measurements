 00C0           FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
 0000           FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
 0040           FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
 0080           FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
 00C0           FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
 0000           FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
 0040           FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
 0080           FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
 00C0           FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
 0010           FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
 0008           FLAG_SUPER:        equ 08h     ; Supervisor Mode
 0004           FLAG_CARRY:        equ 04h     ; Carry Condition Flag
 0002           FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
 0001           FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 0
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
 0001           PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
 0002           PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
 0003           PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
 0000           ; Port 1
 0004           PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
 0005           PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
 0006           PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
 0007           PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
 0000           ; Port 2
 0008           PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
 0009           PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
 000A           PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
 000B           PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
 0000           ; Port 3
 000C           PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
 000D           PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
 000E           PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
 000F           PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
 0000           ; Port 4
 0010           PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
 0011           PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
 0012           PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
 0013           PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
 0000           ; Port 5
 0014           PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
 0015           PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
 0016           PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
 0017           PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
 0000           ; Port 6
 0018           PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
 0019           PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
 001A           PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
 001B           PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
 0000           ; Port 7
 001C           PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
 001D           PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
 001E           PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
 001F           PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00DR0:     equ 20h          ; data register 0                          (#)
 0021           DBB00DR1:     equ 21h          ; data register 1                          (W)
 0022           DBB00DR2:     equ 22h          ; data register 2                          (RW)
 0023           DBB00CR0:     equ 23h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01DR0:     equ 24h          ; data register 0                          (#)
 0025           DBB01DR1:     equ 25h          ; data register 1                          (W)
 0026           DBB01DR2:     equ 26h          ; data register 2                          (RW)
 0027           DBB01CR0:     equ 27h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02DR0:     equ 28h          ; data register 0                          (#)
 0029           DCB02DR1:     equ 29h          ; data register 1                          (W)
 002A           DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
 002B           DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03DR0:     equ 2Ch          ; data register 0                          (#)
 002D           DCB03DR1:     equ 2Dh          ; data register 1                          (W)
 002E           DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
 002F           DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 10, Basic Type B
 0030           DBB10DR0:     equ 30h          ; data register 0                          (#)
 0031           DBB10DR1:     equ 31h          ; data register 1                          (W)
 0032           DBB10DR2:     equ 32h          ; data register 2                          (RW)
 0033           DBB10CR0:     equ 33h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 11, Basic Type B
 0034           DBB11DR0:     equ 34h          ; data register 0                          (#)
 0035           DBB11DR1:     equ 35h          ; data register 1                          (W)
 0036           DBB11DR2:     equ 36h          ; data register 2                          (RW)
 0037           DBB11CR0:     equ 37h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 12, Communications Type B
 0038           DCB12DR0:     equ 38h          ; data register 0                          (#)
 0039           DCB12DR1:     equ 39h          ; data register 1                          (W)
 003A           DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
 003B           DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 13, Communications Type B
 003C           DCB13DR0:     equ 3Ch          ; data register 0                          (#)
 003D           DCB13DR1:     equ 3Dh          ; data register 1                          (W)
 003E           DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
 003F           DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 20, Basic Type B
 0040           DBB20DR0:     equ 40h          ; data register 0                          (#)
 0041           DBB20DR1:     equ 41h          ; data register 1                          (W)
 0042           DBB20DR2:     equ 42h          ; data register 2                          (RW)
 0043           DBB20CR0:     equ 43h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 21, Basic Type B
 0044           DBB21DR0:     equ 44h          ; data register 0                          (#)
 0045           DBB21DR1:     equ 45h          ; data register 1                          (W)
 0046           DBB21DR2:     equ 46h          ; data register 2                          (RW)
 0047           DBB21CR0:     equ 47h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 22, Communications Type B
 0048           DCB22DR0:     equ 48h          ; data register 0                          (#)
 0049           DCB22DR1:     equ 49h          ; data register 1                          (W)
 004A           DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
 004B           DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 23, Communications Type B
 004C           DCB23DR0:     equ 4Ch          ; data register 0                          (#)
 004D           DCB23DR1:     equ 4Dh          ; data register 1                          (W)
 004E           DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
 004F           DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 30, Basic Type B
 0050           DBB30DR0:     equ 50h          ; data register 0                          (#)
 0051           DBB30DR1:     equ 51h          ; data register 1                          (W)
 0052           DBB30DR2:     equ 52h          ; data register 2                          (RW)
 0053           DBB30CR0:     equ 53h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 31, Basic Type B
 0054           DBB31DR0:     equ 54h          ; data register 0                          (#)
 0055           DBB31DR1:     equ 55h          ; data register 1                          (W)
 0056           DBB31DR2:     equ 56h          ; data register 2                          (RW)
 0057           DBB31CR0:     equ 57h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 32, Communications Type B
 0058           DCB32DR0:     equ 58h          ; data register 0                          (#)
 0059           DCB32DR1:     equ 59h          ; data register 1                          (W)
 005A           DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
 005B           DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 33, Communications Type B
 005C           DCB33DR0:     equ 5Ch          ; data register 0                          (#)
 005D           DCB33DR1:     equ 5Dh          ; data register 1                          (W)
 005E           DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
 005F           DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
 0000           
 0000           ;-------------------------------------
 0000           ;  Analog Resource Control Registers
 0000           ;-------------------------------------
 0060           AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
 00C0           AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
 0030           AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
 000C           AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
 0003           AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
 0000           
 0063           ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
 0040           ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
 0038           ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
 0007           ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
 0004           ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
 0003           ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
 0000           
 0064           CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
 0080           CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
 0040           CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
 0020           CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
 0010           CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
 0008           CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
 0004           CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
 0002           CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
 0001           CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
 0000           
 0065           ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
 0070           ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
 0008           ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
 0006           ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
 0001           ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
 0000           
 0066           CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
 0080           CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
 0040           CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
 0020           CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
 0010           CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
 0000           
 0000           ;---------------------------------------------------
 0000           ;  Analog PSoC block Registers
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;---------------------------------------------------
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 0
 0070           ACB00CR3:     equ 70h          ; Control register 3                       (RW)
 0071           ACB00CR0:     equ 71h          ; Control register 0                       (RW)
 0072           ACB00CR1:     equ 72h          ; Control register 1                       (RW)
 0073           ACB00CR2:     equ 73h          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 1
 0074           ACB01CR3:     equ 74h          ; Control register 3                       (RW)
 0075           ACB01CR0:     equ 75h          ; Control register 0                       (RW)
 0076           ACB01CR1:     equ 76h          ; Control register 1                       (RW)
 0077           ACB01CR2:     equ 77h          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 2
 0078           ACB02CR3:     equ 78h          ; Control register 3                       (RW)
 0079           ACB02CR0:     equ 79h          ; Control register 0                       (RW)
 007A           ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
 007B           ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 3
 007C           ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
 007D           ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
 007E           ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
 007F           ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 1 Col 0
 0080           ASC10CR0:     equ 80h          ; Control register 0                       (RW)
 0081           ASC10CR1:     equ 81h          ; Control register 1                       (RW)
 0082           ASC10CR2:     equ 82h          ; Control register 2                       (RW)
 0083           ASC10CR3:     equ 83h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 1 Col 1
 0084           ASD11CR0:     equ 84h          ; Control register 0                       (RW)
 0085           ASD11CR1:     equ 85h          ; Control register 1                       (RW)
 0086           ASD11CR2:     equ 86h          ; Control register 2                       (RW)
 0087           ASD11CR3:     equ 87h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 1 Col 2
 0088           ASC12CR0:     equ 88h          ; Control register 0                       (RW)
 0089           ASC12CR1:     equ 89h          ; Control register 1                       (RW)
 008A           ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
 008B           ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 1 Col 3
 008C           ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
 008D           ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
 008E           ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
 008F           ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 2 Col 0
 0090           ASD20CR0:     equ 90h          ; Control register 0                       (RW)
 0091           ASD20CR1:     equ 91h          ; Control register 1                       (RW)
 0092           ASD20CR2:     equ 92h          ; Control register 2                       (RW)
 0093           ASD20CR3:     equ 93h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 2 Col 1
 0094           ASC21CR0:     equ 94h          ; Control register 0                       (RW)
 0095           ASC21CR1:     equ 95h          ; Control register 1                       (RW)
 0096           ASC21CR2:     equ 96h          ; Control register 2                       (RW)
 0097           ASC21CR3:     equ 97h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 2 Col 2
 0098           ASD22CR0:     equ 98h          ; Control register 0                       (RW)
 0099           ASD22CR1:     equ 99h          ; Control register 1                       (RW)
 009A           ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
 009B           ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 2 Col 3
 009C           ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
 009D           ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
 009E           ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
 009F           ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Global General Purpose Data Registers
 0000           ;-----------------------------------------------
 006C           TMP0_DR:      equ 6Ch          ; deprecated do not use
 006D           TMP1_DR:      equ 6Dh          ; deprecated do not use
 006E           TMP2_DR:      equ 6Eh          ; deprecated do not use
 006F           TMP3_DR:      equ 6Fh          ; deprecated do not use
 0000           
 006C           TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
 006D           TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
 006E           TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
 006F           TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Row Digital Interconnects
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;------------------------------------------------
 0000           
 00B0           RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
 00B1           RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
 00B2           RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
 00B3           RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
 00B4           RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
 00B5           RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
 00B6           RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
 0000           
 00B8           RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
 00B9           RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
 00BA           RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
 00BB           RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
 00BC           RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
 00BD           RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
 00BE           RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
 0000           
 00C0           RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
 00C1           RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
 00C2           RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
 00C3           RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
 00C4           RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
 00C5           RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
 00C6           RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
 0000           
 00C8           RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
 00C9           RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
 00CA           RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
 00CB           RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
 00CC           RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
 00CD           RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
 00CE           RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Ram Page Pointers
 0000           ;-----------------------------------------------
 00D0           CUR_PP:      equ 0D0h           ; Current   Page Pointer
 00D1           STK_PP:      equ 0D1h           ; Stack     Page Pointer
 00D3           IDX_PP:      equ 0D3h           ; Index     Page Pointer
 00D4           MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
 00D5           MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
 0000           
 0000           ;------------------------------------------------
 0000           ;  I2C Configuration Registers
 0000           ;------------------------------------------------
 00D6           I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
 0040           I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
 0020           I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
 0010           I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
 0000           I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
 0004           I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
 0008           I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
 000C           I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
 000C           I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
 0002           I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
 0001           I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
 0000           
 00D7           I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
 0080           I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
 0040           I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
 0020           I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
 0010           I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
 0008           I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
 0004           I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
 0002           I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
 0001           I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
 0000           
 00D8           I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
 0000           
 00D9           I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
 0008           I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
 0004           I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
 0002           I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
 0001           I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;------------------------------------------------
 00DA           INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
 0000                                          ; Use INT_MSK0 bit field masks
 00DB           INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
 0000                                          ; Use INT_MSK1 bit field masks
 00DC           INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
 0000                                          ; Use INT_MSK2 bit field masks
 00DD           INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
 0000                                          ; Use INT_MSK3 bit field masks
 0000           
 00DE           INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
 0080           INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
 0001           INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
 0000           
 00DF           INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
 0080           INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
 0040           INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
 0020           INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
 0010           INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
 0008           INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
 0004           INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
 0002           INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
 0001           INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
 0000           
 00E0           INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
 0080           INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
 0040           INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
 0020           INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
 0010           INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
 0008           INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
 0004           INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
 0002           INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
 0001           INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
 0000           
 00E1           INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
 0080           INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
 0040           INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
 0020           INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
 0010           INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
 0008           INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
 0004           INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
 0002           INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
 0001           INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
 0000           
 00E2           INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
 00E3           RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
 0000           
 0000           ; DECIMATOR Registers
 00E4           DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
 00E5           DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
 00E6           DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
 00E7           DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
 0000                                          ; Also see DEC_CR2 in bank 1
 0000           
 0000           ; Multiplier and MAC (Multiply/Accumulate) Unit
 0000           //   Compatibility Set: Maps onto MAC0
 00E8           MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
 00E9           MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
 00EA           MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
 00EB           MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
 00EC           MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
 00EC           ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
 00ED           MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
 00ED           ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
 00EE           MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
 00EE           ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
 00EF           MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
 00EF           ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
 0000           
 0000           // Multiply/Accumulate Unit 0
 00E8           MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
 00E9           MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
 00EA           MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
 00EB           MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
 00EC           MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
 00EC           ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
 00ED           MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
 00ED           ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
 00EE           MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
 00EE           ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
 00EF           MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
 00EF           ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
 0000           
 0000           // Multiply/Accumulate Unit 1
 00A8           MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
 00A9           MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
 00AA           MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
 00AB           MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
 00AC           MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
 00AC           ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
 00AD           MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
 00AD           ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
 00AE           MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
 00AE           ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
 00AF           MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
 00AF           ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  System Status and Control Registers
 0000           ;
 0000           ;  Note: The following registers are mapped into both
 0000           ;        register bank 0 AND register bank 1.
 0000           ;------------------------------------------------------
 00F7           CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
 0000                                              ; Use FLAG_ masks defined at top of file
 0000           
 00FE           CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
 0080           CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
 0010           CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
 0008           CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
 0004           CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
 0001           CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
 0000           
 00FF           CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
 0080           CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
 0020           CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
 0010           CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
 0008           CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
 0001           CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 1
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
 0001           PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
 0002           PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
 0003           PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 1
 0004           PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
 0005           PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
 0006           PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
 0007           PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 2
 0008           PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
 0009           PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
 000A           PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
 000B           PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 3
 000C           PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
 000D           PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
 000E           PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
 000F           PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 4
 0010           PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
 0011           PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
 0012           PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
 0013           PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 5
 0014           PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
 0015           PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
 0016           PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
 0017           PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 6
 0018           PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
 0019           PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
 001A           PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
 001B           PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 7
 001C           PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
 001D           PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
 001E           PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
 001F           PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00FN:      equ 20h          ; Function Register                        (RW)
 0021           DBB00IN:      equ 21h          ;    Input Register                        (RW)
 0022           DBB00OU:      equ 22h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01FN:      equ 24h          ; Function Register                        (RW)
 0025           DBB01IN:      equ 25h          ;    Input Register                        (RW)
 0026           DBB01OU:      equ 26h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02FN:      equ 28h          ; Function Register                        (RW)
 0029           DCB02IN:      equ 29h          ;    Input Register                        (RW)
 002A           DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03FN:      equ 2Ch          ; Function Register                        (RW)
 002D           DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
 002E           DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 10, Basic Type B
 0030           DBB10FN:      equ 30h          ; Function Register                        (RW)
 0031           DBB10IN:      equ 31h          ;    Input Register                        (RW)
 0032           DBB10OU:      equ 32h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 11, Basic Type B
 0034           DBB11FN:      equ 34h          ; Function Register                        (RW)
 0035           DBB11IN:      equ 35h          ;    Input Register                        (RW)
 0036           DBB11OU:      equ 36h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 12, Communications Type B
 0038           DCB12FN:      equ 38h          ; Function Register                        (RW)
 0039           DCB12IN:      equ 39h          ;    Input Register                        (RW)
 003A           DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 13, Communications Type B
 003C           DCB13FN:      equ 3Ch          ; Function Register                        (RW)
 003D           DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
 003E           DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 20, Basic Type B
 0040           DBB20FN:      equ 40h          ; Function Register                        (RW)
 0041           DBB20IN:      equ 41h          ;    Input Register                        (RW)
 0042           DBB20OU:      equ 42h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 21, Basic Type B
 0044           DBB21FN:      equ 44h          ; Function Register                        (RW)
 0045           DBB21IN:      equ 45h          ;    Input Register                        (RW)
 0046           DBB21OU:      equ 46h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 22, Communications Type B
 0048           DCB22FN:      equ 48h          ; Function Register                        (RW)
 0049           DCB22IN:      equ 49h          ;    Input Register                        (RW)
 004A           DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 23, Communications Type B
 004C           DCB23FN:      equ 4Ch          ; Function Register                        (RW)
 004D           DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
 004E           DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 30, Basic Type B
 0050           DBB30FN:      equ 50h          ; Function Register                        (RW)
 0051           DBB30IN:      equ 51h          ;    Input Register                        (RW)
 0052           DBB30OU:      equ 52h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 31, Basic Type B
 0054           DBB31FN:      equ 54h          ; Function Register                        (RW)
 0055           DBB31IN:      equ 55h          ;    Input Register                        (RW)
 0056           DBB31OU:      equ 56h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 32, Communications Type B
 0058           DCB32FN:      equ 58h          ; Function Register                        (RW)
 0059           DCB32IN:      equ 59h          ;    Input Register                        (RW)
 005A           DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 33, Communications Type B
 005C           DCB33FN:      equ 5Ch          ; Function Register                        (RW)
 005D           DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
 005E           DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0060           CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
 00C0           CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
 0030           CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
 000C           CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
 0003           CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
 0000           
 0061           CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
 0040           CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
 0038           CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
 0007           CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
 0000           
 0062           ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
 0080           ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
 0040           ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
 0020           ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
 0010           ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
 0008           ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
 0004           ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
 0002           ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
 0001           ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
 0000           
 0063           AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
 0070           AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
 0007           AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
 0000           
 0066           AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
 0070           AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
 0007           AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
 0000           
 0067           ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
 00F0           ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
 000F           ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
 0000           
 0068           ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
 00F0           ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
 000F           ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
 0000           
 0069           CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
 0008           CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
 0001           CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
 0000           
 0000           ;------------------------------------------------
 0000           ;  Global Digital Interconnects
 0000           ;------------------------------------------------
 0000           
 00D0           GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
 00D1           GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
 00D2           GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
 00D3           GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Clock and System Control Registers
 0000           ;------------------------------------------------
 0000           
 00DD           OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
 0080           OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
 0040           OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
 0020           OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
 0010           OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
 0008           OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
 0004           OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
 0002           OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
 0001           OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
 0000           
 00DE           OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
 0003           OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
 0000           
 00DF           OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
 0000           
 00E0           OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
 0080           OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
 0040           OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
 0020           OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
 0018           OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
 0000           OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
 0008           OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
 0010           OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
 0018           OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
 0007           OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
 0000           OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
 0001           OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
 0002           OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
 0003           OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
 0004           OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
 0005           OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
 0006           OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
 0007           OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
 0000           
 00E1           OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
 00F0           OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
 000F           OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
 0000           
 00E2           OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
 0004           OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
 0002           OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
 0001           OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
 0000           
 00E3           VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
 0080           VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
 0030           VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
 0000           VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
 0010           VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
 0020           VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
 0008           VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
 0007           VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
 0000           VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
 0010           VLT_CR_4V5_POR:       equ 10h    ;    deprecated
 0020           VLT_CR_4V75_POR:      equ 20h    ;    deprecated
 0030           VLT_CR_DISABLE:       equ 30h    ;    deprecated
 0000           
 00E4           VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
 0004           VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
 0002           VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
 0001           VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
 0000           
 00E7           DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
 00E8           IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
 00E9           ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
 00EA           BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
 00EB           ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
 0000           
 0000           ;;=============================================================================
 0000           ;;      M8C System Macros
 0000           ;;  These macros should be used when their functions are needed.
 0000           ;;=============================================================================
 0000           
 0000           ;----------------------------------------------------
 0000           ;  Swapping Register Banks
 0000           ;----------------------------------------------------
 0000               macro M8C_SetBank0
 0000               and   F, ~FLAG_XIO_MASK
 0000               macro M8C_SetBank1
 0000               or    F, FLAG_XIO_MASK
 0000               macro M8C_EnableGInt
 0000               or    F, FLAG_GLOBAL_IE
 0000               macro M8C_DisableGInt
 0000               and   F, ~FLAG_GLOBAL_IE
 0000               macro M8C_DisableIntMask
 0000               and   reg[@0], ~@1              ; disable specified interrupt enable bit
 0000               macro M8C_EnableIntMask
 0000               or    reg[@0], @1               ; enable specified interrupt enable bit
 0000               macro M8C_ClearIntFlag
 0000               mov   reg[@0], ~@1              ; clear specified interrupt enable bit
 0000               macro M8C_EnableWatchDog
 0000               and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
 0000               macro M8C_ClearWDT
 0000               mov   reg[RES_WDT], 00h
 0000               macro M8C_ClearWDTAndSleep
 0000               mov   reg[RES_WDT], 38h
 0000               macro M8C_Stall
 0000               or    reg[ASY_CR], ASY_CR_SYNCEN
 0000               macro M8C_Unstall
 0000               and   reg[ASY_CR], ~ASY_CR_SYNCEN
 0000               macro M8C_Sleep
 0000               or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
 0000               ; The next instruction to be executed depends on the state of the
 0000               ; various interrupt enable bits. If some interrupts are enabled
 0000               ; and the global interrupts are disabled, the next instruction will
 0000               ; be the one that follows the invocation of this macro. If global
 0000               ; interrupts are also enabled then the next instruction will be
 0000               ; from the interrupt vector table. If no interrupts are enabled
 0000               ; then the CPU sleeps forever.
 0000               macro M8C_Stop
 0000               ; In general, you probably don't want to do this, but here's how:
 0000               or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
 0000               ; Next instruction to be executed is located in the interrupt
 0000               ; vector table entry for Power-On Reset.
 0000               macro M8C_Reset
 0000               ; Restore CPU to the power-on reset state.
 0000               mov A, 0
 0000               SSC
 0000               ; Next non-supervisor instruction will be at interrupt vector 0.
 0000               macro Suspend_CodeCompressor
 0000               or   F, 0
 0000               macro Resume_CodeCompressor
 0000               add  SP, 0
 0007           SYSTEM_STACK_PAGE: equ 7   
 0000           SYSTEM_STACK_BASE_ADDR: equ 0h   
 0001           SYSTEM_LARGE_MEMORY_MODEL: equ 1   
 0000           SYSTEM_SMALL_MEMORY_MODEL: equ 0   
 0001           IMAGECRAFT: equ 1   
 0002           HITECH: equ 2   
 0001           TOOLCHAIN: equ IMAGECRAFT   
 0001           SYSTEM_TOOLS: equ 1   
 0001           SYSTEM_IDXPG_TRACKS_STK_PP: equ 1   
 0000           SYSTEM_IDXPG_TRACKS_IDX_PP: equ 0   
 0000           SYSTEM_MULTIPAGE_STACK: equ 0 
 0000           
 0000           
 0000           ;  ******* Function Class Definitions *******
 0000           ;
 0000           ;  These definitions are used to describe RAM access patterns. They provide
 0000           ;  documentation and they control prologue and epilogue macros that perform
 0000           ;  the necessary housekeeping functions for large memory model devices like
 0000           ;  the CY8C29000.
 0000           
 0001           RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
 0002           RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
 0004           RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
 0008           RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
 0000           
 0000           ; ******* Hi Tech Specific *******
 0000           ; Turn on the expansion of all macros by default
                IF (TOOLCHAIN & HITECH)
                OPT EXPAND
                ENDIF
                ;  ******* Page Pointer Manipulation Macros *******
                ;
                ;  Most of the following macros are conditionally compiled so they only
                ;  produce code if the large memory model is selected.
                
                   ;-----------------------------------------------
                   ;  Set Stack Page Macro
                   ;-----------------------------------------------
                   ;
                   ;  DESC: Modify STK_PP in the large or small memory Models.
                   ;
                   ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
                   ;        which stack operations like PUSH and POP store and retrieve their
                   ;        data
                   ;
                   ;  COST: 8 instruction cycles (in LMM only)
                
 0000              macro RAM_SETPAGE_STK( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[STK_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_CUR( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[CUR_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_IDX( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[IDX_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_MVR( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[MVR_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_MVW( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[MVW_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_IDX2STK
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 IF ( SYSTEM_MULTIPAGE_STACK )
 0000                    mov   A, reg[STK_PP]
 0000                    mov   reg[IDX_PP], A
 0000                 ELSE
 0000                    RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
 0000                 ENDIF
 0000              ENDIF
 0000              macro RAM_CHANGE_PAGE_MODE( MODE )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 0000                 or    F,  FLAG_PGMODE_MASK & @MODE
 0000              ENDIF
 0000              macro RAM_SET_NATIVE_PAGING
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000              IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                 or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
 0000              ENDIF ;  PGMODE LOCKED
 0000              IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                 or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
 0000              ENDIF ; PGMODE FREE
 0000              ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_RESTORE_NATIVE_PAGING
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000              IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                 RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
 0000              ENDIF ;  PGMODE LOCKED
 0000              IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                 RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
 0000              ENDIF ; PGMODE FREE
 0000              ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_X_POINTS_TO_STACKPAGE
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 or   F, FLAG_PGMODE_01b
 0000              ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_X_POINTS_TO_INDEXPAGE
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 and  F, ~FLAG_PGMODE_01b
 0000              ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_PROLOGUE( ACTUAL_CLASS )
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_1
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
 0000                 IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                    RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
 0000                 ENDIF
 0000              ENDIF ; RAM_USE_CLASS_2
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
 0000                 IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                    RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
 0000                 ENDIF
 0000              ENDIF ; RAM_USE_CLASS_3
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_4
 0000           
 0000              macro RAM_EPILOGUE( ACTUAL_CLASS )
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_1
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
 0000                 RAM_RESTORE_NATIVE_PAGING
 0000              ENDIF ; RAM_USE_CLASS_2
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
 0000                 RAM_RESTORE_NATIVE_PAGING
 0000              ENDIF ; RAM_USE_CLASS_3
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_4
 0000           
 0000              macro REG_PRESERVE( IOReg )
 0000              mov   A, reg[ @IOReg ]
 0000              push  A
 0000              macro REG_RESTORE( IOReg )
 0000              pop   A
 0000              mov   reg[ @IOReg ], A
 0000              macro ISR_PRESERVE_PAGE_POINTERS
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 REG_PRESERVE CUR_PP
 0000                 REG_PRESERVE IDX_PP
 0000                 REG_PRESERVE MVR_PP
 0000                 REG_PRESERVE MVW_PP
 0000              ENDIF
 0000              macro ISR_RESTORE_PAGE_POINTERS
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 REG_RESTORE MVW_PP
 0000                 REG_RESTORE MVR_PP
 0000                 REG_RESTORE IDX_PP
 0000                 REG_RESTORE CUR_PP
 0000              ENDIF
 00C0           FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
 0000           FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
 0040           FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
 0080           FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
 00C0           FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
 0000           FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
 0040           FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
 0080           FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
 00C0           FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
 0010           FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
 0008           FLAG_SUPER:        equ 08h     ; Supervisor Mode
 0004           FLAG_CARRY:        equ 04h     ; Carry Condition Flag
 0002           FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
 0001           FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 0
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
 0001           PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
 0002           PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
 0003           PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
 0000           ; Port 1
 0004           PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
 0005           PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
 0006           PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
 0007           PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
 0000           ; Port 2
 0008           PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
 0009           PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
 000A           PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
 000B           PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
 0000           ; Port 3
 000C           PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
 000D           PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
 000E           PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
 000F           PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
 0000           ; Port 4
 0010           PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
 0011           PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
 0012           PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
 0013           PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
 0000           ; Port 5
 0014           PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
 0015           PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
 0016           PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
 0017           PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
 0000           ; Port 6
 0018           PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
 0019           PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
 001A           PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
 001B           PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
 0000           ; Port 7
 001C           PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
 001D           PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
 001E           PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
 001F           PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00DR0:     equ 20h          ; data register 0                          (#)
 0021           DBB00DR1:     equ 21h          ; data register 1                          (W)
 0022           DBB00DR2:     equ 22h          ; data register 2                          (RW)
 0023           DBB00CR0:     equ 23h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01DR0:     equ 24h          ; data register 0                          (#)
 0025           DBB01DR1:     equ 25h          ; data register 1                          (W)
 0026           DBB01DR2:     equ 26h          ; data register 2                          (RW)
 0027           DBB01CR0:     equ 27h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02DR0:     equ 28h          ; data register 0                          (#)
 0029           DCB02DR1:     equ 29h          ; data register 1                          (W)
 002A           DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
 002B           DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03DR0:     equ 2Ch          ; data register 0                          (#)
 002D           DCB03DR1:     equ 2Dh          ; data register 1                          (W)
 002E           DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
 002F           DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 10, Basic Type B
 0030           DBB10DR0:     equ 30h          ; data register 0                          (#)
 0031           DBB10DR1:     equ 31h          ; data register 1                          (W)
 0032           DBB10DR2:     equ 32h          ; data register 2                          (RW)
 0033           DBB10CR0:     equ 33h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 11, Basic Type B
 0034           DBB11DR0:     equ 34h          ; data register 0                          (#)
 0035           DBB11DR1:     equ 35h          ; data register 1                          (W)
 0036           DBB11DR2:     equ 36h          ; data register 2                          (RW)
 0037           DBB11CR0:     equ 37h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 12, Communications Type B
 0038           DCB12DR0:     equ 38h          ; data register 0                          (#)
 0039           DCB12DR1:     equ 39h          ; data register 1                          (W)
 003A           DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
 003B           DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 13, Communications Type B
 003C           DCB13DR0:     equ 3Ch          ; data register 0                          (#)
 003D           DCB13DR1:     equ 3Dh          ; data register 1                          (W)
 003E           DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
 003F           DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 20, Basic Type B
 0040           DBB20DR0:     equ 40h          ; data register 0                          (#)
 0041           DBB20DR1:     equ 41h          ; data register 1                          (W)
 0042           DBB20DR2:     equ 42h          ; data register 2                          (RW)
 0043           DBB20CR0:     equ 43h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 21, Basic Type B
 0044           DBB21DR0:     equ 44h          ; data register 0                          (#)
 0045           DBB21DR1:     equ 45h          ; data register 1                          (W)
 0046           DBB21DR2:     equ 46h          ; data register 2                          (RW)
 0047           DBB21CR0:     equ 47h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 22, Communications Type B
 0048           DCB22DR0:     equ 48h          ; data register 0                          (#)
 0049           DCB22DR1:     equ 49h          ; data register 1                          (W)
 004A           DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
 004B           DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 23, Communications Type B
 004C           DCB23DR0:     equ 4Ch          ; data register 0                          (#)
 004D           DCB23DR1:     equ 4Dh          ; data register 1                          (W)
 004E           DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
 004F           DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 30, Basic Type B
 0050           DBB30DR0:     equ 50h          ; data register 0                          (#)
 0051           DBB30DR1:     equ 51h          ; data register 1                          (W)
 0052           DBB30DR2:     equ 52h          ; data register 2                          (RW)
 0053           DBB30CR0:     equ 53h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 31, Basic Type B
 0054           DBB31DR0:     equ 54h          ; data register 0                          (#)
 0055           DBB31DR1:     equ 55h          ; data register 1                          (W)
 0056           DBB31DR2:     equ 56h          ; data register 2                          (RW)
 0057           DBB31CR0:     equ 57h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 32, Communications Type B
 0058           DCB32DR0:     equ 58h          ; data register 0                          (#)
 0059           DCB32DR1:     equ 59h          ; data register 1                          (W)
 005A           DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
 005B           DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 33, Communications Type B
 005C           DCB33DR0:     equ 5Ch          ; data register 0                          (#)
 005D           DCB33DR1:     equ 5Dh          ; data register 1                          (W)
 005E           DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
 005F           DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
 0000           
 0000           ;-------------------------------------
 0000           ;  Analog Resource Control Registers
 0000           ;-------------------------------------
 0060           AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
 00C0           AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
 0030           AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
 000C           AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
 0003           AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
 0000           
 0063           ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
 0040           ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
 0038           ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
 0007           ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
 0004           ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
 0003           ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
 0000           
 0064           CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
 0080           CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
 0040           CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
 0020           CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
 0010           CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
 0008           CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
 0004           CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
 0002           CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
 0001           CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
 0000           
 0065           ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
 0070           ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
 0008           ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
 0006           ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
 0001           ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
 0000           
 0066           CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
 0080           CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
 0040           CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
 0020           CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
 0010           CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
 0000           
 0000           ;---------------------------------------------------
 0000           ;  Analog PSoC block Registers
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;---------------------------------------------------
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 0
 0070           ACB00CR3:     equ 70h          ; Control register 3                       (RW)
 0071           ACB00CR0:     equ 71h          ; Control register 0                       (RW)
 0072           ACB00CR1:     equ 72h          ; Control register 1                       (RW)
 0073           ACB00CR2:     equ 73h          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 1
 0074           ACB01CR3:     equ 74h          ; Control register 3                       (RW)
 0075           ACB01CR0:     equ 75h          ; Control register 0                       (RW)
 0076           ACB01CR1:     equ 76h          ; Control register 1                       (RW)
 0077           ACB01CR2:     equ 77h          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 2
 0078           ACB02CR3:     equ 78h          ; Control register 3                       (RW)
 0079           ACB02CR0:     equ 79h          ; Control register 0                       (RW)
 007A           ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
 007B           ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 3
 007C           ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
 007D           ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
 007E           ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
 007F           ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 1 Col 0
 0080           ASC10CR0:     equ 80h          ; Control register 0                       (RW)
 0081           ASC10CR1:     equ 81h          ; Control register 1                       (RW)
 0082           ASC10CR2:     equ 82h          ; Control register 2                       (RW)
 0083           ASC10CR3:     equ 83h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 1 Col 1
 0084           ASD11CR0:     equ 84h          ; Control register 0                       (RW)
 0085           ASD11CR1:     equ 85h          ; Control register 1                       (RW)
 0086           ASD11CR2:     equ 86h          ; Control register 2                       (RW)
 0087           ASD11CR3:     equ 87h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 1 Col 2
 0088           ASC12CR0:     equ 88h          ; Control register 0                       (RW)
 0089           ASC12CR1:     equ 89h          ; Control register 1                       (RW)
 008A           ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
 008B           ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 1 Col 3
 008C           ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
 008D           ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
 008E           ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
 008F           ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 2 Col 0
 0090           ASD20CR0:     equ 90h          ; Control register 0                       (RW)
 0091           ASD20CR1:     equ 91h          ; Control register 1                       (RW)
 0092           ASD20CR2:     equ 92h          ; Control register 2                       (RW)
 0093           ASD20CR3:     equ 93h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 2 Col 1
 0094           ASC21CR0:     equ 94h          ; Control register 0                       (RW)
 0095           ASC21CR1:     equ 95h          ; Control register 1                       (RW)
 0096           ASC21CR2:     equ 96h          ; Control register 2                       (RW)
 0097           ASC21CR3:     equ 97h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 2 Col 2
 0098           ASD22CR0:     equ 98h          ; Control register 0                       (RW)
 0099           ASD22CR1:     equ 99h          ; Control register 1                       (RW)
 009A           ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
 009B           ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 2 Col 3
 009C           ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
 009D           ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
 009E           ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
 009F           ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Global General Purpose Data Registers
 0000           ;-----------------------------------------------
 006C           TMP0_DR:      equ 6Ch          ; deprecated do not use
 006D           TMP1_DR:      equ 6Dh          ; deprecated do not use
 006E           TMP2_DR:      equ 6Eh          ; deprecated do not use
 006F           TMP3_DR:      equ 6Fh          ; deprecated do not use
 0000           
 006C           TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
 006D           TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
 006E           TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
 006F           TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Row Digital Interconnects
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;------------------------------------------------
 0000           
 00B0           RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
 00B1           RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
 00B2           RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
 00B3           RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
 00B4           RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
 00B5           RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
 00B6           RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
 0000           
 00B8           RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
 00B9           RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
 00BA           RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
 00BB           RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
 00BC           RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
 00BD           RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
 00BE           RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
 0000           
 00C0           RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
 00C1           RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
 00C2           RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
 00C3           RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
 00C4           RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
 00C5           RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
 00C6           RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
 0000           
 00C8           RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
 00C9           RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
 00CA           RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
 00CB           RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
 00CC           RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
 00CD           RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
 00CE           RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Ram Page Pointers
 0000           ;-----------------------------------------------
 00D0           CUR_PP:      equ 0D0h           ; Current   Page Pointer
 00D1           STK_PP:      equ 0D1h           ; Stack     Page Pointer
 00D3           IDX_PP:      equ 0D3h           ; Index     Page Pointer
 00D4           MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
 00D5           MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
 0000           
 0000           ;------------------------------------------------
 0000           ;  I2C Configuration Registers
 0000           ;------------------------------------------------
 00D6           I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
 0040           I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
 0020           I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
 0010           I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
 0000           I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
 0004           I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
 0008           I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
 000C           I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
 000C           I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
 0002           I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
 0001           I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
 0000           
 00D7           I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
 0080           I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
 0040           I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
 0020           I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
 0010           I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
 0008           I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
 0004           I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
 0002           I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
 0001           I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
 0000           
 00D8           I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
 0000           
 00D9           I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
 0008           I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
 0004           I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
 0002           I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
 0001           I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;------------------------------------------------
 00DA           INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
 0000                                          ; Use INT_MSK0 bit field masks
 00DB           INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
 0000                                          ; Use INT_MSK1 bit field masks
 00DC           INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
 0000                                          ; Use INT_MSK2 bit field masks
 00DD           INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
 0000                                          ; Use INT_MSK3 bit field masks
 0000           
 00DE           INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
 0080           INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
 0001           INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
 0000           
 00DF           INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
 0080           INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
 0040           INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
 0020           INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
 0010           INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
 0008           INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
 0004           INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
 0002           INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
 0001           INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
 0000           
 00E0           INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
 0080           INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
 0040           INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
 0020           INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
 0010           INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
 0008           INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
 0004           INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
 0002           INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
 0001           INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
 0000           
 00E1           INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
 0080           INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
 0040           INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
 0020           INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
 0010           INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
 0008           INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
 0004           INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
 0002           INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
 0001           INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
 0000           
 00E2           INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
 00E3           RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
 0000           
 0000           ; DECIMATOR Registers
 00E4           DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
 00E5           DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
 00E6           DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
 00E7           DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
 0000                                          ; Also see DEC_CR2 in bank 1
 0000           
 0000           ; Multiplier and MAC (Multiply/Accumulate) Unit
 0000           //   Compatibility Set: Maps onto MAC0
 00E8           MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
 00E9           MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
 00EA           MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
 00EB           MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
 00EC           MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
 00EC           ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
 00ED           MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
 00ED           ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
 00EE           MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
 00EE           ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
 00EF           MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
 00EF           ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
 0000           
 0000           // Multiply/Accumulate Unit 0
 00E8           MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
 00E9           MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
 00EA           MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
 00EB           MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
 00EC           MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
 00EC           ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
 00ED           MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
 00ED           ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
 00EE           MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
 00EE           ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
 00EF           MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
 00EF           ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
 0000           
 0000           // Multiply/Accumulate Unit 1
 00A8           MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
 00A9           MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
 00AA           MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
 00AB           MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
 00AC           MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
 00AC           ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
 00AD           MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
 00AD           ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
 00AE           MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
 00AE           ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
 00AF           MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
 00AF           ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  System Status and Control Registers
 0000           ;
 0000           ;  Note: The following registers are mapped into both
 0000           ;        register bank 0 AND register bank 1.
 0000           ;------------------------------------------------------
 00F7           CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
 0000                                              ; Use FLAG_ masks defined at top of file
 0000           
 00FE           CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
 0080           CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
 0010           CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
 0008           CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
 0004           CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
 0001           CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
 0000           
 00FF           CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
 0080           CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
 0020           CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
 0010           CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
 0008           CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
 0001           CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 1
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
 0001           PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
 0002           PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
 0003           PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 1
 0004           PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
 0005           PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
 0006           PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
 0007           PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 2
 0008           PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
 0009           PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
 000A           PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
 000B           PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 3
 000C           PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
 000D           PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
 000E           PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
 000F           PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 4
 0010           PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
 0011           PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
 0012           PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
 0013           PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 5
 0014           PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
 0015           PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
 0016           PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
 0017           PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 6
 0018           PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
 0019           PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
 001A           PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
 001B           PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 7
 001C           PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
 001D           PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
 001E           PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
 001F           PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00FN:      equ 20h          ; Function Register                        (RW)
 0021           DBB00IN:      equ 21h          ;    Input Register                        (RW)
 0022           DBB00OU:      equ 22h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01FN:      equ 24h          ; Function Register                        (RW)
 0025           DBB01IN:      equ 25h          ;    Input Register                        (RW)
 0026           DBB01OU:      equ 26h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02FN:      equ 28h          ; Function Register                        (RW)
 0029           DCB02IN:      equ 29h          ;    Input Register                        (RW)
 002A           DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03FN:      equ 2Ch          ; Function Register                        (RW)
 002D           DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
 002E           DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 10, Basic Type B
 0030           DBB10FN:      equ 30h          ; Function Register                        (RW)
 0031           DBB10IN:      equ 31h          ;    Input Register                        (RW)
 0032           DBB10OU:      equ 32h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 11, Basic Type B
 0034           DBB11FN:      equ 34h          ; Function Register                        (RW)
 0035           DBB11IN:      equ 35h          ;    Input Register                        (RW)
 0036           DBB11OU:      equ 36h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 12, Communications Type B
 0038           DCB12FN:      equ 38h          ; Function Register                        (RW)
 0039           DCB12IN:      equ 39h          ;    Input Register                        (RW)
 003A           DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 13, Communications Type B
 003C           DCB13FN:      equ 3Ch          ; Function Register                        (RW)
 003D           DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
 003E           DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 20, Basic Type B
 0040           DBB20FN:      equ 40h          ; Function Register                        (RW)
 0041           DBB20IN:      equ 41h          ;    Input Register                        (RW)
 0042           DBB20OU:      equ 42h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 21, Basic Type B
 0044           DBB21FN:      equ 44h          ; Function Register                        (RW)
 0045           DBB21IN:      equ 45h          ;    Input Register                        (RW)
 0046           DBB21OU:      equ 46h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 22, Communications Type B
 0048           DCB22FN:      equ 48h          ; Function Register                        (RW)
 0049           DCB22IN:      equ 49h          ;    Input Register                        (RW)
 004A           DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 23, Communications Type B
 004C           DCB23FN:      equ 4Ch          ; Function Register                        (RW)
 004D           DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
 004E           DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 30, Basic Type B
 0050           DBB30FN:      equ 50h          ; Function Register                        (RW)
 0051           DBB30IN:      equ 51h          ;    Input Register                        (RW)
 0052           DBB30OU:      equ 52h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 31, Basic Type B
 0054           DBB31FN:      equ 54h          ; Function Register                        (RW)
 0055           DBB31IN:      equ 55h          ;    Input Register                        (RW)
 0056           DBB31OU:      equ 56h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 32, Communications Type B
 0058           DCB32FN:      equ 58h          ; Function Register                        (RW)
 0059           DCB32IN:      equ 59h          ;    Input Register                        (RW)
 005A           DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 33, Communications Type B
 005C           DCB33FN:      equ 5Ch          ; Function Register                        (RW)
 005D           DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
 005E           DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0060           CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
 00C0           CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
 0030           CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
 000C           CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
 0003           CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
 0000           
 0061           CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
 0040           CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
 0038           CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
 0007           CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
 0000           
 0062           ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
 0080           ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
 0040           ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
 0020           ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
 0010           ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
 0008           ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
 0004           ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
 0002           ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
 0001           ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
 0000           
 0063           AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
 0070           AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
 0007           AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
 0000           
 0066           AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
 0070           AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
 0007           AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
 0000           
 0067           ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
 00F0           ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
 000F           ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
 0000           
 0068           ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
 00F0           ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
 000F           ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
 0000           
 0069           CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
 0008           CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
 0001           CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
 0000           
 0000           ;------------------------------------------------
 0000           ;  Global Digital Interconnects
 0000           ;------------------------------------------------
 0000           
 00D0           GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
 00D1           GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
 00D2           GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
 00D3           GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Clock and System Control Registers
 0000           ;------------------------------------------------
 0000           
 00DD           OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
 0080           OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
 0040           OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
 0020           OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
 0010           OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
 0008           OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
 0004           OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
 0002           OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
 0001           OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
 0000           
 00DE           OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
 0003           OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
 0000           
 00DF           OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
 0000           
 00E0           OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
 0080           OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
 0040           OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
 0020           OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
 0018           OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
 0000           OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
 0008           OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
 0010           OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
 0018           OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
 0007           OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
 0000           OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
 0001           OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
 0002           OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
 0003           OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
 0004           OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
 0005           OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
 0006           OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
 0007           OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
 0000           
 00E1           OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
 00F0           OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
 000F           OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
 0000           
 00E2           OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
 0004           OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
 0002           OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
 0001           OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
 0000           
 00E3           VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
 0080           VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
 0030           VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
 0000           VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
 0010           VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
 0020           VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
 0008           VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
 0007           VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
 0000           VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
 0010           VLT_CR_4V5_POR:       equ 10h    ;    deprecated
 0020           VLT_CR_4V75_POR:      equ 20h    ;    deprecated
 0030           VLT_CR_DISABLE:       equ 30h    ;    deprecated
 0000           
 00E4           VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
 0004           VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
 0002           VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
 0001           VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
 0000           
 00E7           DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
 00E8           IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
 00E9           ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
 00EA           BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
 00EB           ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
 0000           
 0000           ;;=============================================================================
 0000           ;;      M8C System Macros
 0000           ;;  These macros should be used when their functions are needed.
 0000           ;;=============================================================================
 0000           
 0000           ;----------------------------------------------------
 0000           ;  Swapping Register Banks
 0000           ;----------------------------------------------------
 0000               macro M8C_SetBank0
 0000               and   F, ~FLAG_XIO_MASK
 0000               macro M8C_SetBank1
 0000               or    F, FLAG_XIO_MASK
 0000               macro M8C_EnableGInt
 0000               or    F, FLAG_GLOBAL_IE
 0000               macro M8C_DisableGInt
 0000               and   F, ~FLAG_GLOBAL_IE
 0000               macro M8C_DisableIntMask
 0000               and   reg[@0], ~@1              ; disable specified interrupt enable bit
 0000               macro M8C_EnableIntMask
 0000               or    reg[@0], @1               ; enable specified interrupt enable bit
 0000               macro M8C_ClearIntFlag
 0000               mov   reg[@0], ~@1              ; clear specified interrupt enable bit
 0000               macro M8C_EnableWatchDog
 0000               and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
 0000               macro M8C_ClearWDT
 0000               mov   reg[RES_WDT], 00h
 0000               macro M8C_ClearWDTAndSleep
 0000               mov   reg[RES_WDT], 38h
 0000               macro M8C_Stall
 0000               or    reg[ASY_CR], ASY_CR_SYNCEN
 0000               macro M8C_Unstall
 0000               and   reg[ASY_CR], ~ASY_CR_SYNCEN
 0000               macro M8C_Sleep
 0000               or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
 0000               ; The next instruction to be executed depends on the state of the
 0000               ; various interrupt enable bits. If some interrupts are enabled
 0000               ; and the global interrupts are disabled, the next instruction will
 0000               ; be the one that follows the invocation of this macro. If global
 0000               ; interrupts are also enabled then the next instruction will be
 0000               ; from the interrupt vector table. If no interrupts are enabled
 0000               ; then the CPU sleeps forever.
 0000               macro M8C_Stop
 0000               ; In general, you probably don't want to do this, but here's how:
 0000               or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
 0000               ; Next instruction to be executed is located in the interrupt
 0000               ; vector table entry for Power-On Reset.
 0000               macro M8C_Reset
 0000               ; Restore CPU to the power-on reset state.
 0000               mov A, 0
 0000               SSC
 0000               ; Next non-supervisor instruction will be at interrupt vector 0.
 0000               macro Suspend_CodeCompressor
 0000               or   F, 0
 0000               macro Resume_CodeCompressor
 0000               add  SP, 0
 0008           Boot_RxD_bINT_MASK:        equ 08h
 0000           ;RX8 interrupt address
 00E1           Boot_RxD_INT_REG:          equ 0e1h
 0000           
 0000           Boot_RxD_RXBUF_ENABLE:                      equ   0
 0000           
 0020           Boot_RxD_RX_IGNORE_BELOW:                    equ  20h
 0010           Boot_RxD_RX_BUFFER_SIZE:                     equ  10h
 000D           Boot_RxD_CMD_TERM:                           equ  dh
 0020           Boot_RxD_DELIMITER:                          equ  20h
 0000           
 0000           ; This equate will be removed in future revisions.
 0000           ; Do not use.
 0008           bBoot_RxD_INT_MASK:        equ 08h
 0000           ;------------------------------------
 0000           ;  RX8 Parity masks
 0000           ;------------------------------------
 0000           Boot_RxD_PARITY_NONE:           equ   0h
 0002           Boot_RxD_PARITY_EVEN:           equ   2h
 0006           Boot_RxD_PARITY_ODD:            equ   6h
 0000           
 0000           ;------------------------------------
 0000           ;  RX8 Status Register masks
 0000           ;------------------------------------
 0000           
 0010           Boot_RxD_RX_ACTIVE:             equ   10h
 0008           Boot_RxD_RX_COMPLETE:           equ   08h
 0008           Boot_RxD_RX_REG_FULL:           equ   08h
 0080           Boot_RxD_RX_PARITY_ERROR:       equ   80h
 0040           Boot_RxD_RX_OVERRUN_ERROR:      equ   40h
 0020           Boot_RxD_RX_FRAMING_ERROR:      equ   20h
 00E0           Boot_RxD_RX_ERROR:              equ   E0h
 00E0           Boot_RxD_RX_NO_ERROR:           equ   E0h
 0001           Boot_RxD_RX_ENABLE:             equ   01h
 0000           
 00F0           Boot_RxD_RX_BUF_ERROR:                  equ   F0h  ; Mask for any Rx that may occur.
 0010           Boot_RxD_RX_BUF_OVERRUN:                equ   10h  ; This indicates the software buffer has
 0000                                                                   ; been over run.
 0001           Boot_RxD_RX_BUF_CMDTERM:                equ   01h  ; Command terminator has been received.
 0000           
 0001           Boot_RxD_RX_NO_DATA:                    equ   01h
 00E0           Boot_RxD_RX_NO_ERROR:                   equ   E0h
 0000           
 0000           ; Old equates, will be removed in future release
 0000           ; Do not use
 0000           RX8_PARITY_NONE:           equ   0h
 0002           RX8_PARITY_EVEN:           equ   2h
 0006           RX8_PARITY_ODD:            equ   6h
 0010           RX8_RX_ACTIVE:             equ   10h
 0008           RX8_RX_COMPLETE:           equ   08h
 0080           RX8_RX_PARITY_ERROR:       equ   80h
 0040           RX8_RX_OVERRUN_ERROR:      equ   40h
 0020           RX8_RX_FRAMING_ERROR:      equ   20h
 00E0           RX8_RX_NO_ERROR:           equ   E0h
 0000           
 0000           
 0000           ;--------------------------------------------------
 0000           ; Register Address Constants for Boot_RxD
 0000           ;--------------------------------------------------
 002F           Boot_RxD_CONTROL_REG:   equ 2fh                  ;Control register
 002C           Boot_RxD_RX_SHIFT_REG:  equ 2ch                  ;RX Shift Register register
 002E           Boot_RxD_RX_BUFFER_REG: equ 2eh                  ;RX Buffer Register
 002C           Boot_RxD_FUNC_REG:  equ 2ch                      ;Function register
 002D           Boot_RxD_INPUT_REG: equ 2dh                      ;Input register
 002E           Boot_RxD_OUTPUT_REG:    equ 2eh                  ;Output register
 0000           
 0000           ; end of file Boot_RxD.inc
 0000           
 0000           
 0000           
 0000           
 0000           
 0000           
 0000           
 0000           ;---------------------------------------------------
 0000           ; Constants for Boot_TxD API's
 0000           ;---------------------------------------------------
 0000           
 0000           ;mask value for global int reg bit for TX instance
 0004           Boot_TxD_bINT_MASK:        equ 04h
 0000           ;TX8 interrupt address
 00E1           Boot_TxD_INT_REG:          equ 0e1h
 0000           
 0000           ; Old equate, will be removed in future release, Do not use.
 0004           bBoot_TxD_INT_MASK:        equ 04h
 0000           
 0000           
 0000           ;------------------------------------
 0000           ;  Transmitter Parity masks
 0000           ;------------------------------------
 0000           Boot_TxD_PARITY_NONE:       equ   00h
 0002           Boot_TxD_PARITY_EVEN:       equ   02h
 0006           Boot_TxD_PARITY_ODD:        equ   06h
 0000           
 0000           ;------------------------------------
 0000           ;  Transmitter Status Register masks
 0000           ;------------------------------------
 0020           Boot_TxD_TX_COMPLETE:        equ   20h
 0010           Boot_TxD_TX_BUFFER_EMPTY:    equ   10h
 0000           
 0000           
 0000           Boot_TxD_INT_MODE_TX_REG_EMPTY:              equ 0x00
 0001           Boot_TxD_INT_MODE_TX_COMPLETE:               equ 0x01
 0000           
 0000           ; Do not use! old style equates.  Will be moved
 0000           ; in future versions.
 0000           TX8_PARITY_NONE:           equ   00h
 0002           TX8_PARITY_EVEN:           equ   02h
 0006           TX8_PARITY_ODD:            equ   06h
 0020           TX8_TX_COMPLETE:           equ   20h
 0010           TX8_TX_BUFFER_EMPTY:       equ   10h
 0000           
 0000           ;----------------------------------------------------
 0000           ;  Register Address Constants for Boot_TxD
 0000           ;----------------------------------------------------
 002B           Boot_TxD_CONTROL_REG:   equ 2bh                  ; Control register
 0028           Boot_TxD_TX_SHIFT_REG:  equ 28h                  ; TX Shift Register register
 0029           Boot_TxD_TX_BUFFER_REG: equ 29h                  ; TX Buffer Register
 0028           Boot_TxD_FUNC_REG:  equ 28h                      ; Function register
 0029           Boot_TxD_INPUT_REG: equ 29h                      ; Input register
 002A           Boot_TxD_OUTPUT_REG:    equ 2ah                  ; Output register
 0000           
 0000           ; end of file Boot_TxD.inc
 0000           
 0000           
 0000           
 0000           
 0000           
 0000           
 0000           
 0000           
 0000           
 0000           ;--------------------------------------------------
 0000           ; Constants for Boot_Counter API's.
 0000           ;--------------------------------------------------
 0000           
 0001           Boot_Counter_CONTROL_REG_START_BIT:        equ 0x01    ; Control register start bit
 00E1           Boot_Counter_INT_REG:                      equ 0x0e1
 0002           Boot_Counter_INT_MASK:                     equ 0x02
 0000           
 0000           
 0000           ;--------------------------------------------------
 0000           ; Constants for Boot_Counter user defined values
 0000           ;--------------------------------------------------
 0000           
 8000           Boot_Counter_PERIOD:                       equ 0x8000
 4000           Boot_Counter_COMPARE_VALUE:                equ 0x4000
 0000           
 0000           
 0000           ;--------------------------------------------------
 0000           ; Register Address Constants for Boot_Counter
 0000           ;--------------------------------------------------
 0000           
 0020           Boot_Counter_COUNTER_LSB_REG:          equ 0x20   ; DR0 Counter register
 0024           Boot_Counter_COUNTER_MSB_REG:          equ 0x24
 0021           Boot_Counter_PERIOD_LSB_REG:           equ 0x21   ; DR1 Period register
 0025           Boot_Counter_PERIOD_MSB_REG:           equ 0x25
 0022           Boot_Counter_COMPARE_LSB_REG:          equ 0x22   ; DR2 CompareValue register
 0026           Boot_Counter_COMPARE_MSB_REG:          equ 0x26
 0023           Boot_Counter_CONTROL_LSB_REG:          equ 0x23   ; Control register
 0027           Boot_Counter_CONTROL_MSB_REG:          equ 0x27
 0020           Boot_Counter_FUNC_LSB_REG:             equ 0x20   ; Function register
 0024           Boot_Counter_FUNC_MSB_REG:             equ 0x24
 0021           Boot_Counter_INPUT_LSB_REG:            equ 0x21   ; Input register
 0025           Boot_Counter_INPUT_MSB_REG:            equ 0x25
 0022           Boot_Counter_OUTPUT_LSB_REG:           equ 0x22   ; Output register
 0026           Boot_Counter_OUTPUT_MSB_REG:           equ 0x26
 0000           
 0000           
 0000           ;--------------------------------------------------
 0000           ; Boot_Counter Macro 'Functions'
 0000           ;--------------------------------------------------
 0000           
 0000              macro Boot_Counter_Start_M
 0000              or    reg[Boot_Counter_CONTROL_LSB_REG],  Boot_Counter_CONTROL_REG_START_BIT
 0000              macro Boot_Counter_Stop_M
 0000              and   reg[Boot_Counter_CONTROL_LSB_REG], ~Boot_Counter_CONTROL_REG_START_BIT
 0000              macro Boot_Counter_EnableInt_M
 0000              M8C_EnableIntMask Boot_Counter_INT_REG, Boot_Counter_INT_MASK
 0000              macro Boot_Counter_DisableInt_M
 0000              M8C_DisableIntMask Boot_Counter_INT_REG, Boot_Counter_INT_MASK
                Area BootLoaderArea(ROM,REL)
                
                ;-----------------------------------------------
                ;  Global Symbols
                ;-----------------------------------------------
                export   Boot_RxD_Start
                export  _Boot_RxD_Start
                export   Boot_RxD_bReadRxData
                export  _Boot_RxD_bReadRxData
                export   Boot_RxD_bReadRxStatus
                export  _Boot_RxD_bReadRxStatus
                
                export   Boot_TxD_Start
                export  _Boot_TxD_Start
                export   Boot_TxD_SendData
                export  _Boot_TxD_SendData
                export   Boot_TxD_bReadTxStatus
                export  _Boot_TxD_bReadTxStatus
                
                export  Boot_Counter_DisableInt
                export _Boot_Counter_DisableInt
                export  Boot_Counter_Start
                export _Boot_Counter_Start
                export  Boot_Counter_Stop
                export _Boot_Counter_Stop
                export  Boot_Counter_WritePeriod
                export _Boot_Counter_WritePeriod
                export  Boot_Counter_WriteCompareValue
                export _Boot_Counter_WriteCompareValue
                export  Boot_Counter_wReadCounter
                export _Boot_Counter_wReadCounter
                
                
                
                
                //---------------------------------------------------------------------------------
                // Configuration
                //---------------------------------------------------------------------------------
                
                export Boot_LoadConfigInit
                export _Boot_LoadConfigInit
                
                //export NO_SHADOW
                //export _NO_SHADOW
                
 0010           FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
 00FF           END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
 0000           
                Area BootLoaderArea(ROM,REL)
                
                ;---------------------------------------------------------------------------
                ; LoadConfigInit - Establish the start-up configuration (except for a few
                ;                  parameters handled by boot code, like CPU speed). This
                ;                  function can be called from user code, but typically it
                ;                  is only called from boot.
                ;
                ;       INPUTS: None.
                ;      RETURNS: Nothing.
                ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                ;               In the large memory model currently only the page
                ;               pointer registers listed below are modified.  This does
                ;               not guarantee that in future implementations of this
                ;               function other page pointer registers will not be
                ;               modified.
                ;          
                ;               Page Pointer Registers Modified: 
                ;               CUR_PP
                ;
 0000           _Boot_LoadConfigInit:
 0000            Boot_LoadConfigInit:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                    
 0000 7C0060            lcall   LoadConfigTBL_bootloader_cy8c29_Ordered
 0003 7C0007            lcall   LoadConfig_bootloader_cy8c29
 0006           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0006 7F            ret
 0007           
 0007           ;---------------------------------------------------------------------------
 0007           ; Load Configuration bootloader_cy8c29
 0007           ;
 0007           ;    Load configuration registers for bootloader_cy8c29.
 0007           ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
 0007           ;
 0007           ;       INPUTS: None.
 0007           ;      RETURNS: Nothing.
 0007           ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
 0007           ;               modified as may the Page Pointer registers!
 0007           ;               In the large memory model currently only the page
 0007           ;               pointer registers listed below are modified.  This does
 0007           ;               not guarantee that in future implementations of this
 0007           ;               function other page pointer registers will not be
 0007           ;               modified.
 0007           ;          
 0007           ;               Page Pointer Registers Modified: 
 0007           ;               CUR_PP
 0007           ;
 0007           _LoadConfig_bootloader_cy8c29:
 0007            LoadConfig_bootloader_cy8c29:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                
 0007 10                push    x
 0008 70EF          and   F, ~FLAG_XIO_MASK
 000A 5000          mov     a, 0                    ; Specify bank 0
 000C 67            asr     a                       ; Store in carry flag
 000D                                               ; Load bank 0 table:
 000D 5049          mov     A, >LoadConfigTBL_bootloader_cy8c29_Bank0
 000F 5749          mov     X, <LoadConfigTBL_bootloader_cy8c29_Bank0
 0011 7C0020        lcall   LoadConfig              ; Load the bank 0 values
 0014           
 0014 5001          mov     a, 1                    ; Specify bank 1
 0016 67            asr     a                       ; Store in carry flag
 0017                                               ; Load bank 1 table:
 0017 50B0          mov     A, >LoadConfigTBL_bootloader_cy8c29_Bank1
 0019 57B0          mov     X, <LoadConfigTBL_bootloader_cy8c29_Bank1
 001B 7C0020        lcall   LoadConfig              ; Load the bank 1 values
 001E           
 001E 20                pop             x
 001F           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 001F 7F            ret
 0020           
 0020           
 0020           
 0020           
 0020           ;---------------------------------------------------------------------------
 0020           ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
 0020           ;              pairs. Terminate on address=0xFF.
 0020           ;
 0020           ;  INPUTS:  [A,X] points to the table to be loaded
 0020           ;           Flag Register Carry bit encodes the Register Bank
 0020           ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
 0020           ;
 0020           ;  RETURNS: nothing.
 0020           ;
 0020           ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
 0020           ;                X-3 Temporary store for register address
 0020           ;                X-2 LSB of config table address
 0020           ;                X-1 MSB of config table address
 0020           ;
 0020           LoadConfig:
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0020 3802          add     SP, 2                   ; Set up local vars
 0022 10            push    X                       ; Save config table address on stack
 0023 08            push    A
 0024 4F            mov     X, SP
 0025 56FC00        mov     [X-4], 0                ; Set default Destination to Bank 0
 0028 D004          jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
 002A 56FC01        mov     [X-4], 1                ; No Carry: default to Bank 1
 002D           .BankSelectSaved:
 002D 18            pop     A
 002E 20            pop     X
 002F           
 002F           LoadConfigLp:
 002F 70EF          and   F, ~FLAG_XIO_MASK
 0031 62E300        mov   reg[RES_WDT], 00h
 0034 10            push    X                       ; Preserve the config table address
 0035 08            push    A
 0036 28            romx                            ; Load register address from table
 0037 39FF          cmp     A, END_CONFIG_TABLE     ; End of table?
 0039 A01F          jz      EndLoadConfig           ;   Yes, go wrap it up
 003B 4F            mov     X, SP                   ;
 003C 48FC01        tst     [X-4], 1                ; Loading IO Bank 1?
 003F A003          jz      .IOBankNowSet           ;    No, Bank 0 is fine
 0041 7110          or    F, FLAG_XIO_MASK
 0043           .IOBankNowSet:
 0043 54FD          mov     [X-3], A                ; Stash the register address
 0045 18            pop     A                       ; Retrieve the table address
 0046 20            pop     X
 0047 75            inc     X                       ; Advance to the data byte
 0048 0900          adc     A, 0
 004A 10            push    X                       ; Save the config table address again
 004B 08            push    A
 004C 28            romx                            ; load config data from the table
 004D 4F            mov     X, SP                   ; retrieve the register address
 004E 59FD          mov     X, [X-3]
 0050 6100          mov     reg[X], A               ; Configure the register
 0052 18            pop     A                       ; retrieve the table address
 0053 20            pop     X
 0054 75            inc     X                       ; advance to next table entry
 0055 0900          adc     A, 0
 0057 8FD7          jmp     LoadConfigLp            ; loop to configure another register
 0059           EndLoadConfig:
 0059 38FC          add     SP, -4
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 005B 703F            and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 005D 71C0            or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 005F 7F            ret
 0060           
 0060           LoadConfigTBL_bootloader_cy8c29_Ordered:
 0060           ;  Ordered Global Register values
 0060 7110          or    F, FLAG_XIO_MASK
 0062 620010            mov     reg[00h], 10h           ; Port_0_DriveMode_0 register (PRT0DM0)
 0065 6201EF            mov     reg[01h], efh           ; Port_0_DriveMode_1 register (PRT0DM1)
 0068 70EF          and   F, ~FLAG_XIO_MASK
 006A 6203EF            mov     reg[03h], efh           ; Port_0_DriveMode_2 register (PRT0DM2)
 006D 620210            mov     reg[02h], 10h           ; Port_0_GlobalSelect register (PRT0GS)
 0070 7110          or    F, FLAG_XIO_MASK
 0072 620200            mov     reg[02h], 00h           ; Port_0_IntCtrl_0 register (PRT0IC0)
 0075 620300            mov     reg[03h], 00h           ; Port_0_IntCtrl_1 register (PRT0IC1)
 0078 70EF          and   F, ~FLAG_XIO_MASK
 007A 620100            mov     reg[01h], 00h           ; Port_0_IntEn register (PRT0IE)
 007D 7110          or    F, FLAG_XIO_MASK
 007F 620400            mov     reg[04h], 00h           ; Port_1_DriveMode_0 register (PRT1DM0)
 0082 6205FF            mov     reg[05h], ffh           ; Port_1_DriveMode_1 register (PRT1DM1)
 0085 70EF          and   F, ~FLAG_XIO_MASK
 0087 6207F7            mov     reg[07h], f7h           ; Port_1_DriveMode_2 register (PRT1DM2)
 008A 620608            mov     reg[06h], 08h           ; Port_1_GlobalSelect register (PRT1GS)
 008D 7110          or    F, FLAG_XIO_MASK
 008F 620600            mov     reg[06h], 00h           ; Port_1_IntCtrl_0 register (PRT1IC0)
 0092 620700            mov     reg[07h], 00h           ; Port_1_IntCtrl_1 register (PRT1IC1)
 0095 70EF          and   F, ~FLAG_XIO_MASK
 0097 620500            mov     reg[05h], 00h           ; Port_1_IntEn register (PRT1IE)
 009A 7110          or    F, FLAG_XIO_MASK
 009C 620800            mov     reg[08h], 00h           ; Port_2_DriveMode_0 register (PRT2DM0)
 009F 6209FF            mov     reg[09h], ffh           ; Port_2_DriveMode_1 register (PRT2DM1)
 00A2 70EF          and   F, ~FLAG_XIO_MASK
 00A4 620BFF            mov     reg[0bh], ffh           ; Port_2_DriveMode_2 register (PRT2DM2)
 00A7 620A00            mov     reg[0ah], 00h           ; Port_2_GlobalSelect register (PRT2GS)
 00AA 7110          or    F, FLAG_XIO_MASK
 00AC 620A00            mov     reg[0ah], 00h           ; Port_2_IntCtrl_0 register (PRT2IC0)
 00AF 620B00            mov     reg[0bh], 00h           ; Port_2_IntCtrl_1 register (PRT2IC1)
 00B2 70EF          and   F, ~FLAG_XIO_MASK
 00B4 620900            mov     reg[09h], 00h           ; Port_2_IntEn register (PRT2IE)
 00B7 7110          or    F, FLAG_XIO_MASK
 00B9 620C00            mov     reg[0ch], 00h           ; Port_3_DriveMode_0 register (PRT3DM0)
 00BC 620D00            mov     reg[0dh], 00h           ; Port_3_DriveMode_1 register (PRT3DM1)
 00BF 70EF          and   F, ~FLAG_XIO_MASK
 00C1 620F00            mov     reg[0fh], 00h           ; Port_3_DriveMode_2 register (PRT3DM2)
 00C4 620E00            mov     reg[0eh], 00h           ; Port_3_GlobalSelect register (PRT3GS)
 00C7 7110          or    F, FLAG_XIO_MASK
 00C9 620E00            mov     reg[0eh], 00h           ; Port_3_IntCtrl_0 register (PRT3IC0)
 00CC 620F00            mov     reg[0fh], 00h           ; Port_3_IntCtrl_1 register (PRT3IC1)
 00CF 70EF          and   F, ~FLAG_XIO_MASK
 00D1 620D00            mov     reg[0dh], 00h           ; Port_3_IntEn register (PRT3IE)
 00D4 7110          or    F, FLAG_XIO_MASK
 00D6 621000            mov     reg[10h], 00h           ; Port_4_DriveMode_0 register (PRT4DM0)
 00D9 621100            mov     reg[11h], 00h           ; Port_4_DriveMode_1 register (PRT4DM1)
 00DC 70EF          and   F, ~FLAG_XIO_MASK
 00DE 621300            mov     reg[13h], 00h           ; Port_4_DriveMode_2 register (PRT4DM2)
 00E1 621200            mov     reg[12h], 00h           ; Port_4_GlobalSelect register (PRT4GS)
 00E4 7110          or    F, FLAG_XIO_MASK
 00E6 621200            mov     reg[12h], 00h           ; Port_4_IntCtrl_0 register (PRT4IC0)
 00E9 621300            mov     reg[13h], 00h           ; Port_4_IntCtrl_1 register (PRT4IC1)
 00EC 70EF          and   F, ~FLAG_XIO_MASK
 00EE 621100            mov     reg[11h], 00h           ; Port_4_IntEn register (PRT4IE)
 00F1 7110          or    F, FLAG_XIO_MASK
 00F3 621400            mov     reg[14h], 00h           ; Port_5_DriveMode_0 register (PRT5DM0)
 00F6 621500            mov     reg[15h], 00h           ; Port_5_DriveMode_1 register (PRT5DM1)
 00F9 70EF          and   F, ~FLAG_XIO_MASK
 00FB 621700            mov     reg[17h], 00h           ; Port_5_DriveMode_2 register (PRT5DM2)
 00FE 621600            mov     reg[16h], 00h           ; Port_5_GlobalSelect register (PRT5GS)
 0101 7110          or    F, FLAG_XIO_MASK
 0103 621600            mov     reg[16h], 00h           ; Port_5_IntCtrl_0 register (PRT5IC0)
 0106 621700            mov     reg[17h], 00h           ; Port_5_IntCtrl_1 register (PRT5IC1)
 0109 70EF          and   F, ~FLAG_XIO_MASK
 010B 621500            mov     reg[15h], 00h           ; Port_5_IntEn register (PRT5IE)
 010E 7110          or    F, FLAG_XIO_MASK
 0110 621800            mov     reg[18h], 00h           ; Port_6_DriveMode_0 register (PRT6DM0)
 0113 621900            mov     reg[19h], 00h           ; Port_6_DriveMode_1 register (PRT6DM1)
 0116 70EF          and   F, ~FLAG_XIO_MASK
 0118 621B00            mov     reg[1bh], 00h           ; Port_6_DriveMode_2 register (PRT6DM2)
 011B 621A00            mov     reg[1ah], 00h           ; Port_6_GlobalSelect register (PRT6GS)
 011E 7110          or    F, FLAG_XIO_MASK
 0120 621A00            mov     reg[1ah], 00h           ; Port_6_IntCtrl_0 register (PRT6IC0)
 0123 621B00            mov     reg[1bh], 00h           ; Port_6_IntCtrl_1 register (PRT6IC1)
 0126 70EF          and   F, ~FLAG_XIO_MASK
 0128 621900            mov     reg[19h], 00h           ; Port_6_IntEn register (PRT6IE)
 012B 7110          or    F, FLAG_XIO_MASK
 012D 621C00            mov     reg[1ch], 00h           ; Port_7_DriveMode_0 register (PRT7DM0)
 0130 621D00            mov     reg[1dh], 00h           ; Port_7_DriveMode_1 register (PRT7DM1)
 0133 70EF          and   F, ~FLAG_XIO_MASK
 0135 621F00            mov     reg[1fh], 00h           ; Port_7_DriveMode_2 register (PRT7DM2)
 0138 621E00            mov     reg[1eh], 00h           ; Port_7_GlobalSelect register (PRT7GS)
 013B 7110          or    F, FLAG_XIO_MASK
 013D 621E00            mov     reg[1eh], 00h           ; Port_7_IntCtrl_0 register (PRT7IC0)
 0140 621F00            mov     reg[1fh], 00h           ; Port_7_IntCtrl_1 register (PRT7IC1)
 0143 70EF          and   F, ~FLAG_XIO_MASK
 0145 621D00            mov     reg[1dh], 00h           ; Port_7_IntEn register (PRT7IE)
 0148 7F                ret
 0149           LoadConfigTBL_bootloader_cy8c29_Bank0:
 0149           ;  Instance name Boot_Counter, User Module Counter16
 0149           ;       Instance name Boot_Counter, Block Name CNTR16_LSB(DBB00)
 0149 2300              db              23h, 00h                ;Boot_Counter_CONTROL_LSB_REG(DBB00CR0)
 014B 2100              db              21h, 00h                ;Boot_Counter_PERIOD_LSB_REG(DBB00DR1)
 014D 2200              db              22h, 00h                ;Boot_Counter_COMPARE_LSB_REG(DBB00DR2)
 014F           ;       Instance name Boot_Counter, Block Name CNTR16_MSB(DBB01)
 014F 2700              db              27h, 00h                ;Boot_Counter_CONTROL_MSB_REG(DBB01CR0)
 0151 2580              db              25h, 80h                ;Boot_Counter_PERIOD_MSB_REG(DBB01DR1)
 0153 2640              db              26h, 40h                ;Boot_Counter_COMPARE_MSB_REG(DBB01DR2)
 0155           ;  Instance name Boot_RxD, User Module RX8
 0155           ;       Instance name Boot_RxD, Block Name RX8(DCB03)
 0155 2F00              db              2fh, 00h                ;Boot_RxD_CONTROL_REG  (DCB03CR0)
 0157 2D00              db              2dh, 00h                ;Boot_RxD_(DCB03DR1)
 0159 2E00              db              2eh, 00h                ;Boot_RxD_RX_BUFFER_REG(DCB03DR2)
 015B           ;  Instance name Boot_TxD, User Module TX8
 015B           ;       Instance name Boot_TxD, Block Name TX8(DCB02)
 015B 2B00              db              2bh, 00h                ;Boot_TxD_CONTROL_REG  (DCB02CR0)
 015D 2900              db              29h, 00h                ;Boot_TxD_TX_BUFFER_REG(DCB02DR1)
 015F 2A00              db              2ah, 00h                ;Boot_TxD_(DCB02DR2)
 0161           ;  Global Register values Bank 0
 0161 6028              db              60h, 28h                ; AnalogColumnInputSelect register (AMX_IN)
 0163 6600              db              66h, 00h                ; AnalogComparatorControl1 register (CMP_CR1)
 0165 6305              db              63h, 05h                ; AnalogReferenceControl register (ARF_CR)
 0167 6500              db              65h, 00h                ; AnalogSyncControl register (ASY_CR)
 0169 E600              db              e6h, 00h                ; DecimatorControl_0 register (DEC_CR0)
 016B E700              db              e7h, 00h                ; DecimatorControl_1 register (DEC_CR1)
 016D D600              db              d6h, 00h                ; I2CConfig register (I2C_CFG)
 016F B090              db              b0h, 90h                ; Row_0_InputMux register (RDI0RI)
 0171 B100              db              b1h, 00h                ; Row_0_InputSync register (RDI0SYN)
 0173 B200              db              b2h, 00h                ; Row_0_LogicInputAMux register (RDI0IS)
 0175 B333              db              b3h, 33h                ; Row_0_LogicSelect_0 register (RDI0LT0)
 0177 B433              db              b4h, 33h                ; Row_0_LogicSelect_1 register (RDI0LT1)
 0179 B502              db              b5h, 02h                ; Row_0_OutputDrive_0 register (RDI0SRO0)
 017B B600              db              b6h, 00h                ; Row_0_OutputDrive_1 register (RDI0SRO1)
 017D B855              db              b8h, 55h                ; Row_1_InputMux register (RDI1RI)
 017F B900              db              b9h, 00h                ; Row_1_InputSync register (RDI1SYN)
 0181 BA10              db              bah, 10h                ; Row_1_LogicInputAMux register (RDI1IS)
 0183 BB33              db              bbh, 33h                ; Row_1_LogicSelect_0 register (RDI1LT0)
 0185 BC33              db              bch, 33h                ; Row_1_LogicSelect_1 register (RDI1LT1)
 0187 BD00              db              bdh, 00h                ; Row_1_OutputDrive_0 register (RDI1SRO0)
 0189 BE00              db              beh, 00h                ; Row_1_OutputDrive_1 register (RDI1SRO1)
 018B C000              db              c0h, 00h                ; Row_2_InputMux register (RDI2RI)
 018D C100              db              c1h, 00h                ; Row_2_InputSync register (RDI2SYN)
 018F C220              db              c2h, 20h                ; Row_2_LogicInputAMux register (RDI2IS)
 0191 C333              db              c3h, 33h                ; Row_2_LogicSelect_0 register (RDI2LT0)
 0193 C433              db              c4h, 33h                ; Row_2_LogicSelect_1 register (RDI3LT1)
 0195 C500              db              c5h, 00h                ; Row_2_OutputDrive_0 register (RDI2SRO0)
 0197 C600              db              c6h, 00h                ; Row_2_OutputDrive_1 register (RDI2SRO1)
 0199 C855              db              c8h, 55h                ; Row_3_InputMux register (RDI3RI)
 019B C900              db              c9h, 00h                ; Row_3_InputSync register (RDI3SYN)
 019D CA30              db              cah, 30h                ; Row_3_LogicInputAMux register (RDI3IS)
 019F CB33              db              cbh, 33h                ; Row_3_LogicSelect_0 register (RDI3LT0)
 01A1 CC33              db              cch, 33h                ; Row_3_LogicSelect_1 register (RDI3LT1)
 01A3 CD00              db              cdh, 00h                ; Row_3_OutputDrive_0 register (RDI3SRO0)
 01A5 CE00              db              ceh, 00h                ; Row_3_OutputDrive_1 register (RDI3SRO1)
 01A7 6C00              db              6ch, 00h                ; TMP_DR0 register (TMP_DR0)
 01A9 6D00              db              6dh, 00h                ; TMP_DR1 register (TMP_DR1)
 01AB 6E00              db              6eh, 00h                ; TMP_DR2 register (TMP_DR2)
 01AD 6F00              db              6fh, 00h                ; TMP_DR3 register (TMP_DR3)
 01AF FF                db              ffh
 01B0           
 01B0           LoadConfigTBL_bootloader_cy8c29_Bank1:
 01B0           ;  Instance name Boot_Counter, User Module Counter16
 01B0           ;       Instance name Boot_Counter, Block Name CNTR16_LSB(DBB00)
 01B0 2011              db              20h, 11h                ;Boot_Counter_FUNC_LSB_REG(DBB00FN)
 01B2 2117              db              21h, 17h                ;Boot_Counter_INPUT_LSB_REG(DBB00IN)
 01B4 2240              db              22h, 40h                ;Boot_Counter_OUTPUT_LSB_REG(DBB00OU)
 01B6           ;       Instance name Boot_Counter, Block Name CNTR16_MSB(DBB01)
 01B6 2431              db              24h, 31h                ;Boot_Counter_FUNC_MSB_REG(DBB01FN)
 01B8 2537              db              25h, 37h                ;Boot_Counter_INPUT_MSB_REG(DBB01IN)
 01BA 2640              db              26h, 40h                ;Boot_Counter_OUTPUT_MSB_REG(DBB01OU)
 01BC           ;  Instance name Boot_RxD, User Module RX8
 01BC           ;       Instance name Boot_RxD, Block Name RX8(DCB03)
 01BC 2C05              db              2ch, 05h                ;Boot_RxD_FUNC_REG     (DCB03FN)
 01BE 2DF1              db              2dh, f1h                ;Boot_RxD_INPUT_REG    (DCB03IN)
 01C0 2E40              db              2eh, 40h                ;Boot_RxD_OUTPUT_REG   (DCB03OU)
 01C2           ;  Instance name Boot_TxD, User Module TX8
 01C2           ;       Instance name Boot_TxD, Block Name TX8(DCB02)
 01C2 281D              db              28h, 1dh                ;Boot_TxD_FUNC_REG     (DCB02FN)
 01C4 2901              db              29h, 01h                ;Boot_TxD_INPUT_REG    (DCB02IN)
 01C6 2A44              db              2ah, 44h                ;Boot_TxD_OUTPUT_REG   (DCB02OU)
 01C8           ;  Global Register values Bank 1
 01C8 6100              db              61h, 00h                ; AnalogClockSelect1 register (CLK_CR1)
 01CA 6900              db              69h, 00h                ; AnalogClockSelect2 register (CLK_CR2)
 01CC 6000              db              60h, 00h                ; AnalogColumnClockSelect register (CLK_CR0)
 01CE 6200              db              62h, 00h                ; AnalogIOControl_0 register (ABF_CR0)
 01D0 6733              db              67h, 33h                ; AnalogLUTControl0 register (ALT_CR0)
 01D2 6833              db              68h, 33h                ; AnalogLUTControl1 register (ALT_CR1)
 01D4 6300              db              63h, 00h                ; AnalogModulatorControl_0 register (AMD_CR0)
 01D6 6600              db              66h, 00h                ; AnalogModulatorControl_1 register (AMD_CR1)
 01D8 D100              db              d1h, 00h                ; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
 01DA D300              db              d3h, 00h                ; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
 01DC D000              db              d0h, 00h                ; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
 01DE D200              db              d2h, 00h                ; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
 01E0 E100              db              e1h, 00h                ; OscillatorControl_1 register (OSC_CR1)
 01E2 E200              db              e2h, 00h                ; OscillatorControl_2 register (OSC_CR2)
 01E4 DF19              db              dfh, 19h                ; OscillatorControl_3 register (OSC_CR3)
 01E6 DE00              db              deh, 00h                ; OscillatorControl_4 register (OSC_CR4)
 01E8 DD00              db              ddh, 00h                ; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
 01EA E700              db              e7h, 00h                ; Type2Decimator_Control register (DEC_CR2)
 01EC FF                db              ffh
 01ED           
 01ED           ; PSoC Configuration file trailer PsocConfig.asm
 01ED           
 01ED           
 01ED           
 01ED           
 01ED           
 01ED           
 01ED           
 01ED           
 01ED           ;-----------------------------------------------
 01ED           ;  EQUATES
 01ED           ;-----------------------------------------------
 0001           bfCONTROL_REG_START_BIT:   equ   1     ; Control register start bit
 0010           bfFUNCTION_REG_TX_INT_MODE_BIT:	equ 0x10	; the TX Int Mode bit
 0000           INPUT_REG_NULL:                equ 0x00    ; Clear the input register		
 01ED           
 01ED           .SECTION
 01ED           ;-----------------------------------------------------------------------------
 01ED           ;  FUNCTION NAME: Boot_RxD_Start(BYTE bParity)
 01ED           ;
 01ED           ;  DESCRIPTION:
 01ED           ;    Sets the start bit and parity in the Control register of this user module.
 01ED           ;
 01ED           ;-----------------------------------------------------------------------------
 01ED           ;
 01ED           ;  ARGUMENTS:
 01ED           ;    BYTE bParity - parity of received data.  Use defined masks.
 01ED           ;    passed in A register.
 01ED           ;
 01ED           ;  RETURNS: none
 01ED           ;
 01ED           ;  SIDE EFFECTS:
 01ED           ;    The A and X registers may be modified by this or future implementations
 01ED           ;    of this function.  The same is true for all RAM page pointer registers in
 01ED           ;    the Large Memory Model.  When necessary, it is the calling function's
 01ED           ;    responsibility to perserve their values across calls to fastcall16 
 01ED           ;    functions.
 01ED           ;
 01ED            Boot_RxD_Start:
 01ED           _Boot_RxD_Start:
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 01ED 2901         or    A, bfCONTROL_REG_START_BIT
 01EF 602F         mov   REG[Boot_RxD_CONTROL_REG], A
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 01F1 7F           ret
 01F2           .ENDSECTION
 01F2           
 01F2           .SECTION
 01F2           ;-----------------------------------------------------------------------------
 01F2           ;  FUNCTION NAME: Boot_Counter_Stop
 01F2           ;
 01F2           ;  DESCRIPTION:
 01F2           ;     Disables counter operation by clearing the start bit in the Control
 01F2           ;     register of the LSB block.
 01F2           ;-----------------------------------------------------------------------------
 01F2           ;
 01F2           ;  ARGUMENTS:    None
 01F2           ;  RETURNS:      Nothing
 01F2           ;  SIDE EFFECTS: 
 01F2           ;    The A and X registers may be modified by this or future implementations
 01F2           ;    of this function.  The same is true for all RAM page pointer registers in
 01F2           ;    the Large Memory Model.  When necessary, it is the calling function's
 01F2           ;    responsibility to perserve their values across calls to fastcall16 
 01F2           ;    functions.
 01F2           ;
 01F2            Boot_Counter_Stop:
 01F2           _Boot_Counter_Stop:
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 01F2 4123FE       and   reg[Boot_Counter_CONTROL_LSB_REG], ~Boot_Counter_CONTROL_REG_START_BIT
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 01F5 7F           ret
 01F6           
 01F6           
 01F6           .ENDSECTION
 01F6           
 01F6           
 01F6           .SECTION
 01F6           ;-----------------------------------------------------------------------------
 01F6           ;  FUNCTION NAME: Boot_RxD_bReadRxData
 01F6           ;
 01F6           ;  DESCRIPTION:
 01F6           ;     Reads the RX buffer register.  Should check the status regiser to make
 01F6           ;     sure data is valid.
 01F6           ;
 01F6           ;-----------------------------------------------------------------------------
 01F6           ;
 01F6           ;  ARGUMENTS:  none
 01F6           ;
 01F6           ;  RETURNS:
 01F6           ;    bRxData - returned in A.
 01F6           ;
 01F6           ;  SIDE EFFECTS:
 01F6           ;    The A and X registers may be modified by this or future implementations
 01F6           ;    of this function.  The same is true for all RAM page pointer registers in
 01F6           ;    the Large Memory Model.  When necessary, it is the calling function's
 01F6           ;    responsibility to perserve their values across calls to fastcall16 
 01F6           ;    functions.
 01F6           ;
 01F6            Boot_RxD_bReadRxData:
 01F6           _Boot_RxD_bReadRxData:
 01F6            bBoot_RxD_ReadRxData:
 01F6           _bBoot_RxD_ReadRxData:
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 01F6 5D2E         mov A, REG[Boot_RxD_RX_BUFFER_REG]
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 01F8 7F           ret
 01F9           .ENDSECTION
 01F9           
 01F9           .SECTION
 01F9           ;-----------------------------------------------------------------------------
 01F9           ;  FUNCTION NAME: Boot_RxD_bReadRxStatus
 01F9           ;
 01F9           ;  DESCRIPTION:
 01F9           ;    Reads the RX Status bits in the Control/Status register.
 01F9           ;
 01F9           ;-----------------------------------------------------------------------------
 01F9           ;
 01F9           ;  ARGUMENTS:  none
 01F9           ;
 01F9           ;  RETURNS:
 01F9           ;     BYTE  bRXStatus - transmit status data.  Use the following defined bits
 01F9           ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
 01F9           ;
 01F9           ;  SIDE EFFECTS:
 01F9           ;    The A and X registers may be modified by this or future implementations
 01F9           ;    of this function.  The same is true for all RAM page pointer registers in
 01F9           ;    the Large Memory Model.  When necessary, it is the calling function's
 01F9           ;    responsibility to perserve their values across calls to fastcall16 
 01F9           ;    functions.
 01F9           ;
 01F9            Boot_RxD_bReadRxStatus:
 01F9           _Boot_RxD_bReadRxStatus:
 01F9            bBoot_RxD_ReadRxStatus:
 01F9           _bBoot_RxD_ReadRxStatus:
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 01F9 5D2F         mov A,  REG[Boot_RxD_CONTROL_REG]
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 01FB 7F           ret
 01FC           .ENDSECTION
 01FC           
 01FC           .SECTION
 01FC           ;-----------------------------------------------------------------------------
 01FC           ;  FUNCTION NAME: Boot_TxD_Start(BYTE bParity)
 01FC           ;
 01FC           ;  DESCRIPTION:
 01FC           ;     Sets the start bit and parity in the Control register of this user module.
 01FC           ;     The transmitter will begin transmitting if a byte has been written into the
 01FC           ;     transmit buffer.
 01FC           ;
 01FC           ;-----------------------------------------------------------------------------
 01FC           ;
 01FC           ;  ARGUMENTS:
 01FC           ;    BYTE bParity - parity of transmitted data.  Use defined masks.
 01FC           ;
 01FC           ;  RETURNS:  none
 01FC           ;
 01FC           ;  SIDE EFFECTS:
 01FC           ;    The A and X registers may be modified by this or future implementations
 01FC           ;    of this function.  The same is true for all RAM page pointer registers in
 01FC           ;    the Large Memory Model.  When necessary, it is the calling function's
 01FC           ;    responsibility to perserve their values across calls to fastcall16 
 01FC           ;    functions.
 01FC           ;
 01FC            Boot_TxD_Start:
 01FC           _Boot_TxD_Start:
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 01FC 2901         or    A, bfCONTROL_REG_START_BIT
 01FE 602B         mov   REG[Boot_TxD_CONTROL_REG], A
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0200 7F           ret
 0201           .ENDSECTION
 0201           
 0201           .SECTION
 0201           ;-----------------------------------------------------------------------------
 0201           ;  FUNCTION NAME: Boot_TxD_SendData
 0201           ;
 0201           ;  DESCRIPTION:
 0201           ;     Sends one byte through serial port.
 0201           ;
 0201           ;-----------------------------------------------------------------------------
 0201           ;
 0201           ;  ARGUMENTS:
 0201           ;     BYTE  TxData - data to transmit.
 0201           ;
 0201           ;  RETURNS:
 0201           ;
 0201           ;  SIDE EFFECTS:
 0201           ;    The A and X registers may be modified by this or future implementations
 0201           ;    of this function.  The same is true for all RAM page pointer registers in
 0201           ;    the Large Memory Model.  When necessary, it is the calling function's
 0201           ;    responsibility to perserve their values across calls to fastcall16 
 0201           ;    functions.
 0201           ;
 0201            Boot_TxD_SendData:
 0201           _Boot_TxD_SendData:
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0201 6029         mov REG[Boot_TxD_TX_BUFFER_REG], A
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0203 7F           ret
 0204           .ENDSECTION
 0204           
 0204           .SECTION
 0204           ;-----------------------------------------------------------------------------
 0204           ;  FUNCTION NAME: Boot_TxD_bReadTxStatus
 0204           ;
 0204           ;  DESCRIPTION:
 0204           ;     Reads the Tx Status bits in the Control/Status register.
 0204           ;
 0204           ;-----------------------------------------------------------------------------
 0204           ;
 0204           ;  ARGUMENTS:
 0204           ;
 0204           ;  RETURNS:
 0204           ;     BYTE  bTxStatus - transmit status data.  Use the following defined bits
 0204           ;                       masks: TX_COMPLETE and TX_BUFFER_EMPTY
 0204           ;
 0204           ;  SIDE EFFECTS:
 0204           ;    The A and X registers may be modified by this or future implementations
 0204           ;    of this function.  The same is true for all RAM page pointer registers in
 0204           ;    the Large Memory Model.  When necessary, it is the calling function's
 0204           ;    responsibility to perserve their values across calls to fastcall16 
 0204           ;    functions.
 0204           ;
 0204            Boot_TxD_bReadTxStatus:
 0204           _Boot_TxD_bReadTxStatus:
 0204            bBoot_TxD_ReadTxStatus:
 0204           _bBoot_TxD_ReadTxStatus:
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0204 5D2B         mov A,  REG[Boot_TxD_CONTROL_REG]
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0206 7F           ret
 0207           
 0207           .ENDSECTION
 0207           
 0207           
 0207           
 0207           
 0207           
 0207           
 0207           
 0207           
 0207           
 0207           
 0207           
 0207           .SECTION
 0207           ;-----------------------------------------------------------------------------
 0207           ;  FUNCTION NAME: Boot_Counter_DisableInt
 0207           ;
 0207           ;  DESCRIPTION:
 0207           ;     Disables this counter's interrupt by clearing the interrupt enable
 0207           ;     mask bit associated with this User Module.
 0207           ;-----------------------------------------------------------------------------
 0207           ;
 0207           ;  ARGUMENTS:    None
 0207           ;  RETURNS:      Nothing
 0207           ;  SIDE EFFECTS: 
 0207           ;    The A and X registers may be modified by this or future implementations
 0207           ;    of this function.  The same is true for all RAM page pointer registers in
 0207           ;    the Large Memory Model.  When necessary, it is the calling function's
 0207           ;    responsibility to perserve their values across calls to fastcall16 
 0207           ;    functions.
 0207           ;
 0207            Boot_Counter_DisableInt:
 0207           _Boot_Counter_DisableInt:
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0207 41E1FD        and   reg[Boot_Counter_INT_REG], ~Boot_Counter_INT_MASK              ; disable specified interrupt enable bit
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 020A 7F           ret
 020B           
 020B           
 020B           .ENDSECTION
 020B           
 020B           .SECTION
 020B           ;-----------------------------------------------------------------------------
 020B           ;  FUNCTION NAME: Boot_Counter_Start
 020B           ;
 020B           ;  DESCRIPTION:
 020B           ;     Sets the start bit in the Control register of this user module.  The
 020B           ;     counter will begin counting on the next input clock as soon as the
 020B           ;     enable input is asserted high.
 020B           ;-----------------------------------------------------------------------------
 020B           ;
 020B           ;  ARGUMENTS:    None
 020B           ;  RETURNS:      Nothing
 020B           ;  SIDE EFFECTS: 
 020B           ;    The A and X registers may be modified by this or future implementations
 020B           ;    of this function.  The same is true for all RAM page pointer registers in
 020B           ;    the Large Memory Model.  When necessary, it is the calling function's
 020B           ;    responsibility to perserve their values across calls to fastcall16 
 020B           ;    functions.
 020B           ;
 020B            Boot_Counter_Start:
 020B           _Boot_Counter_Start:
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 020B 432301       or    reg[Boot_Counter_CONTROL_LSB_REG],  Boot_Counter_CONTROL_REG_START_BIT
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 020E 7F           ret
 020F           
 020F           
 020F           .ENDSECTION
 020F           
 020F           .SECTION
 020F           ;-----------------------------------------------------------------------------
 020F           ;  FUNCTION NAME: Boot_Counter_WritePeriod
 020F           ;
 020F           ;  DESCRIPTION:
 020F           ;     Write the 16-bit period value into the Period register (DR1).
 020F           ;-----------------------------------------------------------------------------
 020F           ;
 020F           ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
 020F           ;  RETURNS:   Nothing
 020F           ;  SIDE EFFECTS:
 020F           ;    If the counter user module is stopped, then this value will also be
 020F           ;    latched into the Count registers (DR0).
 020F           ;     
 020F           ;    The A and X registers may be modified by this or future implementations
 020F           ;    of this function.  The same is true for all RAM page pointer registers in
 020F           ;    the Large Memory Model.  When necessary, it is the calling function's
 020F           ;    responsibility to perserve their values across calls to fastcall16 
 020F           ;    functions.
 020F           ;
 020F            Boot_Counter_WritePeriod:
 020F           _Boot_Counter_WritePeriod:
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 020F 6021         mov   reg[Boot_Counter_PERIOD_LSB_REG], A
 0211 5B           mov   A, X
 0212 6025         mov   reg[Boot_Counter_PERIOD_MSB_REG], A
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0214 7F           ret
 0215           
 0215           
 0215           .ENDSECTION
 0215           
 0215           .SECTION
 0215           ;-----------------------------------------------------------------------------
 0215           ;  FUNCTION NAME: Boot_Counter_WriteCompareValue
 0215           ;
 0215           ;  DESCRIPTION:
 0215           ;     Writes compare value into the Compare register (DR2).
 0215           ;-----------------------------------------------------------------------------
 0215           ;
 0215           ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
 0215           ;  RETURNS:      Nothing
 0215           ;  SIDE EFFECTS: 
 0215           ;    The A and X registers may be modified by this or future implementations
 0215           ;    of this function.  The same is true for all RAM page pointer registers in
 0215           ;    the Large Memory Model.  When necessary, it is the calling function's
 0215           ;    responsibility to perserve their values across calls to fastcall16 
 0215           ;    functions.
 0215           ;
 0215            Boot_Counter_WriteCompareValue:
 0215           _Boot_Counter_WriteCompareValue:
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0215 6022         mov   reg[Boot_Counter_COMPARE_LSB_REG], A
 0217 5B           mov   A, X
 0218 6026         mov   reg[Boot_Counter_COMPARE_MSB_REG], A
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 021A 7F           ret
 021B           
 021B           
 021B           .ENDSECTION
 021B           
 021B           .SECTION
 021B           ;-----------------------------------------------------------------------------
 021B           ;  FUNCTION NAME: Boot_Counter_wReadCounter
 021B           ;
 021B           ;  DESCRIPTION:
 021B           ;     Returns the value in the Count register (DR0), preserving the value in
 021B           ;     the compare register (DR2). Interrupts are prevented during the transfer
 021B           ;     from the Count to the Compare registers by holding the clock low in
 021B           ;     the MSB PSoC block.
 021B           ;-----------------------------------------------------------------------------
 021B           ;
 021B           ;  ARGUMENTS: None
 021B           ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
 021B           ;  SIDE EFFECTS:
 021B           ;     1) The user module is stopped momentarily and one or more counts may be missed.
 021B           ;     2) The A and X registers may be modified by this or future implementations
 021B           ;        of this function.  The same is true for all RAM page pointer registers in
 021B           ;        the Large Memory Model.  When necessary, it is the calling function's
 021B           ;        responsibility to perserve their values across calls to fastcall16 
 021B           ;        functions.
 021B           ;
 021B            Boot_Counter_wReadCounter:
 021B           _Boot_Counter_wReadCounter:
 021B            wBoot_Counter_ReadCounter:                      ; this name deprecated
 021B           _wBoot_Counter_ReadCounter:                      ; this name deprecated
 021B           
 0000              bOrigCompareValue:      EQU   0                  ; Frame offset to temp Compare store
 0002              bOrigControlReg:        EQU   2                  ; Frame offset to temp CR0     store
 0003              bOrigClockSetting:      EQU   3                  ; Frame offset to temp Input   store
 0004              wCounter:               EQU   4                  ; Frame offset to temp Count   store
 0006              STACK_FRAME_SIZE:       EQU   6                  ; max stack frame size is 6 bytes
 021B           
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 021B 4F           mov   X, SP                                      ; X <-  stack frame pointer
 021C 5D26         mov   A, reg[Boot_Counter_COMPARE_MSB_REG]    ; Save the Compare register on the stack
 021E 08           push  A                                          ;
 021F 5D22         mov   A, reg[Boot_Counter_COMPARE_LSB_REG]    ;
 0221 08           push  A                                          ;   -stack frame now 2 bytes-
 0222 5D23         mov   A, reg[Boot_Counter_CONTROL_LSB_REG]    ; Save CR0 (running or stopped state)
 0224 08           push  A                                          ;   -stack frame now 3 bytes-
 0225 4123FE       and   reg[Boot_Counter_CONTROL_LSB_REG], ~Boot_Counter_CONTROL_REG_START_BIT
 0228 7110          or    F, FLAG_XIO_MASK
 022A 5D21         mov   A, reg[Boot_Counter_INPUT_LSB_REG]      ; save the LSB clock input setting
 022C 08           push  A                                          ;   on the stack (now 4 bytes) and ...
 022D                                                               ;   hold the clock low:
 022D 622100       mov   reg[Boot_Counter_INPUT_LSB_REG], INPUT_REG_NULL
 0230 70EF          and   F, ~FLAG_XIO_MASK
 0232 5D24         mov   A, reg[Boot_Counter_COUNTER_MSB_REG]    ; DR2 <- DR0 (in the MSB block)
 0234 5D26         mov   A, reg[Boot_Counter_COMPARE_MSB_REG]    ; Stash the Count MSB on the stack
 0236 08           push  A                                          ;   -stack frame is now 5 bytes
 0237 5D20         mov   A, reg[Boot_Counter_COUNTER_LSB_REG]    ; DR2 <- DR0 (in the LSB block)
 0239 5D22         mov   A, reg[Boot_Counter_COMPARE_LSB_REG]    ; Stash the Count LSB on the stack
 023B 08           push  A                                          ;   -stack frame is now 6 bytes-
 023C 5200         mov   A, [X+bOrigCompareValue]                   ; Restore the Compare MSB register
 023E 6026         mov   reg[Boot_Counter_COMPARE_MSB_REG], A    ;
 0240 5201         mov   A, [X+bOrigCompareValue+1]                 ; Restore the Compare LSB register
 0242 6022         mov   reg[Boot_Counter_COMPARE_LSB_REG], A    ;
 0244 7110          or    F, FLAG_XIO_MASK
 0246 5203         mov   A, [X+bOrigClockSetting]                   ; Grab the LSB clock setting...
 0248 6021         mov   reg[Boot_Counter_INPUT_LSB_REG], A      ;   and restore it
 024A 70EF          and   F, ~FLAG_XIO_MASK
 024C 5202         mov   A, [X+bOrigControlReg]                     ;   if it was running when
 024E 6023         mov   reg[Boot_Counter_CONTROL_LSB_REG], A    ;   this function was first called
 0250 18           pop   A                                          ; Setup the return value
 0251 20           pop   X                                          ;
 0252 38FC         ADD   SP, -(STACK_FRAME_SIZE-2)                  ; Zap remainder of stack frame
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0254 703F            and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 0256 71C0            or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0258 7F           ret
 0259           
 0259           .ENDSECTION
